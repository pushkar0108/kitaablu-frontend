{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n// #region Local Imports\nimport { Http } from \"../..\"; // #endregion Local Imports\n// #region Interface Imports\n\n// #endregion Interface Imports\nexport var PlanetaryService = {\n  GetPlanetImage: function GetPlanetImage(payload) {\n    var response;\n    return _regeneratorRuntime.async(function GetPlanetImage$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(Http.Request(\"GET\", \"/planetary/apod\", payload.params));\n\n          case 3:\n            response = _context.sent;\n            _context.next = 9;\n            break;\n\n          case 6:\n            _context.prev = 6;\n            _context.t0 = _context[\"catch\"](0);\n            response = {\n              copyright: \"\",\n              date: \"\",\n              explanation: \"\",\n              hdurl: \"\",\n              service_version: \"\",\n              title: \"\",\n              url: \"\"\n            };\n\n          case 9:\n            return _context.abrupt(\"return\", response);\n\n          case 10:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 6]], Promise);\n  }\n};","map":{"version":3,"sources":["/Users/pushkargoel/Myapps/next-boilerplate/src/Services/API/Planetary/index.ts"],"names":["Http","PlanetaryService","GetPlanetImage","payload","Request","params","response","copyright","date","explanation","hdurl","service_version","title","url"],"mappings":";AAAA;AACA,SAASA,IAAT,gB,CACA;AAEA;;AAEA;AAEA,OAAO,IAAMC,gBAAgB,GAAG;AAC5BC,EAAAA,cAAc,EAAE,wBACZC,OADY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CAMSH,IAAI,CAACI,OAAL,CACb,KADa,EAEb,iBAFa,EAGbD,OAAO,CAACE,MAHK,CANT;;AAAA;AAMRC,YAAAA,QANQ;AAAA;AAAA;;AAAA;AAAA;AAAA;AAYRA,YAAAA,QAAQ,GAAG;AACPC,cAAAA,SAAS,EAAE,EADJ;AAEPC,cAAAA,IAAI,EAAE,EAFC;AAGPC,cAAAA,WAAW,EAAE,EAHN;AAIPC,cAAAA,KAAK,EAAE,EAJA;AAKPC,cAAAA,eAAe,EAAE,EALV;AAMPC,cAAAA,KAAK,EAAE,EANA;AAOPC,cAAAA,GAAG,EAAE;AAPE,aAAX;;AAZQ;AAAA,6CAuBLP,QAvBK;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADY,CAAzB","sourcesContent":["// #region Local Imports\nimport { Http } from \"@Services\";\n// #endregion Local Imports\n\n// #region Interface Imports\nimport { PlanetaryModel } from \"@Interfaces\";\n// #endregion Interface Imports\n\nexport const PlanetaryService = {\n    GetPlanetImage: async (\n        payload: PlanetaryModel.GetApodPayload\n    ): Promise<PlanetaryModel.GetApodResponse> => {\n        let response: PlanetaryModel.GetApodResponse;\n\n        try {\n            response = await Http.Request<PlanetaryModel.GetApodResponse>(\n                \"GET\",\n                \"/planetary/apod\",\n                payload.params\n            );\n        } catch (error) {\n            response = {\n                copyright: \"\",\n                date: \"\",\n                explanation: \"\",\n                hdurl: \"\",\n                service_version: \"\",\n                title: \"\",\n                url: \"\",\n            };\n        }\n\n        return response;\n    },\n};\n"]},"metadata":{},"sourceType":"module"}