{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n// #region Global Imports\nimport \"isomorphic-unfetch\";\nimport getConfig from \"next/config\";\nimport { stringify } from \"query-string\"; // #endregion Global Imports\n// #region Interface Imports\n\n// #endregion Interface Imports\nvar _getConfig = getConfig(),\n    _getConfig$publicRunt = _getConfig.publicRuntimeConfig,\n    API_KEY = _getConfig$publicRunt.API_KEY,\n    API_URL = _getConfig$publicRunt.API_URL;\n\nvar BaseUrl = \"\".concat(API_URL, \"/api\");\nexport var Http = {\n  Request: function Request(methodType, url, params, payload) {\n    return _regeneratorRuntime.async(function Request$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            return _context2.abrupt(\"return\", new Promise(function (resolve, reject) {\n              var query = params ? \"?\".concat(stringify(_objectSpread({}, params, {\n                api_key: API_KEY\n              }))) : \"\"; // fetch(`${BaseUrl}${url}${query}`, {\n\n              fetch(\"\".concat(url).concat(query), {\n                body: JSON.stringify(payload),\n                cache: \"no-cache\",\n                headers: {\n                  \"content-type\": \"application/json\"\n                },\n                method: \"\".concat(methodType)\n              }).then(function _callee(response) {\n                return _regeneratorRuntime.async(function _callee$(_context) {\n                  while (1) {\n                    switch (_context.prev = _context.next) {\n                      case 0:\n                        if (!(response.status === 200)) {\n                          _context.next = 2;\n                          break;\n                        }\n\n                        return _context.abrupt(\"return\", response.json().then(resolve));\n\n                      case 2:\n                        return _context.abrupt(\"return\", reject(response));\n\n                      case 3:\n                      case \"end\":\n                        return _context.stop();\n                    }\n                  }\n                }, null, null, null, Promise);\n              })[\"catch\"](function (e) {\n                reject(e);\n              });\n            }));\n\n          case 1:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n};","map":null,"metadata":{},"sourceType":"module"}