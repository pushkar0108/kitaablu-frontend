{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// #region Global Imports\nimport \"isomorphic-unfetch\";\nimport getConfig from \"next/config\";\nimport { stringify } from \"query-string\"; // #endregion Global Imports\n// #region Interface Imports\n\n// #endregion Interface Imports\nconst {\n  publicRuntimeConfig: {\n    API_KEY,\n    API_URL\n  }\n} = getConfig();\nconst BaseUrl = `${API_URL}/api`;\nexport const Http = {\n  Request: async (methodType, url, params, payload) => {\n    return new Promise((resolve, reject) => {\n      const query = params ? `?${stringify(_objectSpread({}, params, {\n        api_key: API_KEY\n      }))}` : \"\"; // fetch(`${BaseUrl}${url}${query}`, {\n\n      fetch(`${url}${query}`, {\n        body: JSON.stringify(payload),\n        cache: \"no-cache\",\n        headers: {\n          \"content-type\": \"application/json\"\n        },\n        method: `${methodType}`\n      }).then(async response => {\n        if (response.status === 200) {\n          return response.json().then(resolve);\n        }\n\n        return reject(response);\n      }).catch(e => {\n        reject(e);\n      });\n    });\n  }\n};","map":null,"metadata":{},"sourceType":"module"}