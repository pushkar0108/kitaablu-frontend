{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nvar __jsx = React.createElement;\nimport React, { useState } from \"react\";\nimport { AsyncTypeahead } from 'react-bootstrap-typeahead';\nimport { useRouter } from 'next/router';\nimport { Http } from \"../../Services/API/Http\";\nvar SEARCH_URI = 'https://kitaablu.com/api/v1/search/';\n\nvar CustomAsyncTypeahead = function CustomAsyncTypeahead(props) {\n  var router = useRouter();\n\n  var _useState = useState(false),\n      isLoading = _useState[0],\n      setIsLoading = _useState[1];\n\n  var _useState2 = useState([]),\n      options = _useState2[0],\n      setOptions = _useState2[1];\n\n  var handleSearch = function handleSearch(query) {\n    var _options;\n\n    return _regeneratorRuntime.async(function handleSearch$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            setIsLoading(true);\n            _context.prev = 1;\n            _context.next = 4;\n            return _regeneratorRuntime.awrap(Http.Request('GET', \"\".concat(SEARCH_URI + query), {\n              type: props.filter || 'company'\n            }));\n\n          case 4:\n            _options = _context.sent;\n            setOptions(_options);\n            _context.next = 11;\n            break;\n\n          case 8:\n            _context.prev = 8;\n            _context.t0 = _context[\"catch\"](1);\n            console.log(\"Error while fetching props: \", _context.t0);\n\n          case 11:\n            setIsLoading(false);\n\n          case 12:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[1, 8]], Promise);\n  };\n\n  var changeRoute = function changeRoute(options) {\n    if (options && options[0]) {\n      if (props.filter == 'director') {\n        router.push(\"/director/\".concat(options[0].CIN));\n      } else {\n        router.push(\"/company/\".concat(options[0].DIN));\n      }\n    }\n  };\n\n  return __jsx(AsyncTypeahead, {\n    id: \"async-example\",\n    isLoading: isLoading,\n    labelKey: function labelKey(option) {\n      return \"\".concat(option.name, \" | \").concat(option.CIN || option.DIN);\n    },\n    minLength: 3,\n    onSearch: handleSearch,\n    options: options,\n    placeholder: props.placeholder || \"Search using company name or CIN ...\",\n    renderMenuItemChildren: function renderMenuItemChildren(option, props) {\n      return __jsx(\"div\", null, \"\".concat(option.name));\n    },\n    onChange: changeRoute\n  });\n};\n\nexport { CustomAsyncTypeahead as AsyncTypeahead };","map":{"version":3,"sources":["/Users/pushkargoel/Myapps/next-boilerplate/src/Components/AsyncTypeahead/index.tsx"],"names":["React","useState","AsyncTypeahead","useRouter","Http","SEARCH_URI","CustomAsyncTypeahead","props","router","isLoading","setIsLoading","options","setOptions","handleSearch","query","Request","type","filter","console","log","changeRoute","push","CIN","DIN","option","name","placeholder"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,cAAT,QAA+B,2BAA/B;AACA,SAASC,SAAT,QAA0B,aAA1B;AAGA,SAASC,IAAT;AAEA,IAAMC,UAAU,GAAG,qCAAnB;;AACA,IAAMC,oBAAqE,GAAG,SAAxEA,oBAAwE,CAACC,KAAD,EAAwB;AAClG,MAAMC,MAAM,GAAGL,SAAS,EAAxB;;AADkG,kBAEhEF,QAAQ,CAAC,KAAD,CAFwD;AAAA,MAE3FQ,SAF2F;AAAA,MAEhFC,YAFgF;;AAAA,mBAGpET,QAAQ,CAAC,EAAD,CAH4D;AAAA,MAG3FU,OAH2F;AAAA,MAGlFC,UAHkF;;AAKlG,MAAMC,YAAY,GAAG,SAAfA,YAAe,CAAOC,KAAP;AAAA;;AAAA;AAAA;AAAA;AAAA;AACjBJ,YAAAA,YAAY,CAAC,IAAD,CAAZ;AADiB;AAAA;AAAA,6CAIcN,IAAI,CAACW,OAAL,CACvB,KADuB,YAEpBV,UAAU,GAAGS,KAFO,GAGvB;AACIE,cAAAA,IAAI,EAAET,KAAK,CAACU,MAAN,IAAgB;AAD1B,aAHuB,CAJd;;AAAA;AAIPN,YAAAA,QAJO;AAYbC,YAAAA,UAAU,CAACD,QAAD,CAAV;AAZa;AAAA;;AAAA;AAAA;AAAA;AAcbO,YAAAA,OAAO,CAACC,GAAR,CAAY,8BAAZ;;AAda;AAiBjBT,YAAAA,YAAY,CAAC,KAAD,CAAZ;;AAjBiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAArB;;AAoBA,MAAMU,WAAW,GAAG,SAAdA,WAAc,CAACT,OAAD,EAAa;AAC7B,QAAGA,OAAO,IAAIA,OAAO,CAAC,CAAD,CAArB,EAA0B;AACtB,UAAGJ,KAAK,CAACU,MAAN,IAAgB,UAAnB,EAA+B;AAC3BT,QAAAA,MAAM,CAACa,IAAP,qBAAyBV,OAAO,CAAC,CAAD,CAAP,CAAWW,GAApC;AACH,OAFD,MAEO;AACHd,QAAAA,MAAM,CAACa,IAAP,oBAAwBV,OAAO,CAAC,CAAD,CAAP,CAAWY,GAAnC;AACH;AACJ;AACJ,GARD;;AAUA,SACI,MAAC,cAAD;AACI,IAAA,EAAE,EAAC,eADP;AAEI,IAAA,SAAS,EAAEd,SAFf;AAGI,IAAA,QAAQ,EAAE,kBAAAe,MAAM;AAAA,uBAAOA,MAAM,CAACC,IAAd,gBAAwBD,MAAM,CAACF,GAAP,IAAcE,MAAM,CAACD,GAA7C;AAAA,KAHpB;AAII,IAAA,SAAS,EAAE,CAJf;AAKI,IAAA,QAAQ,EAAEV,YALd;AAMI,IAAA,OAAO,EAAEF,OANb;AAOI,IAAA,WAAW,EAAEJ,KAAK,CAACmB,WAAN,IAAqB,sCAPtC;AAQI,IAAA,sBAAsB,EAAE,gCAACF,MAAD,EAASjB,KAAT;AAAA,aACpB,6BACQiB,MAAM,CAACC,IADf,EADoB;AAAA,KAR5B;AAaI,IAAA,QAAQ,EAAEL;AAbd,IADJ;AAiBH,CApDD;;AAsDA,SAASd,oBAAoB,IAAIJ,cAAjC","sourcesContent":["import React, { useState } from \"react\";\nimport { AsyncTypeahead } from 'react-bootstrap-typeahead';\nimport { useRouter } from 'next/router';\n\nimport { IAsyncTypeahead } from \"./AsyncTypeahead\";\nimport { Http } from '../../Services/API/Http';\n\nconst SEARCH_URI = 'https://kitaablu.com/api/v1/search/';\nconst CustomAsyncTypeahead: React.FunctionComponent<IAsyncTypeahead.IProps> = (props): JSX.Element => {\n    const router = useRouter();\n    const [isLoading, setIsLoading] = useState(false);\n    const [options, setOptions] = useState([]);\n\n    const handleSearch = async (query) => {\n        setIsLoading(true);\n\n        try {\n            const options: any = await Http.Request(\n                'GET',\n                `${SEARCH_URI + query}`,\n                {\n                    type: props.filter || 'company'\n                }\n            );\n\n            setOptions(options);\n        } catch (error) {\n            console.log(\"Error while fetching props: \", error);\n        }\n\n        setIsLoading(false);\n    };\n\n    const changeRoute = (options) => {\n        if(options && options[0]) {\n            if(props.filter == 'director') {\n                router.push(`/director/${options[0].CIN}`);\n            } else {\n                router.push(`/company/${options[0].DIN}`);\n            }\n        }\n    };\n\n    return (\n        <AsyncTypeahead\n            id=\"async-example\"\n            isLoading={isLoading}\n            labelKey={option => `${option.name} | ${option.CIN || option.DIN}`}\n            minLength={3}\n            onSearch={handleSearch}\n            options={options}\n            placeholder={props.placeholder || \"Search using company name or CIN ...\"}\n            renderMenuItemChildren={(option, props) => (\n                <div>\n                    {`${option.name}`}\n                </div>\n            )}\n            onChange={changeRoute}\n        />\n    );\n};\n\nexport { CustomAsyncTypeahead as AsyncTypeahead };\n"]},"metadata":{},"sourceType":"module"}