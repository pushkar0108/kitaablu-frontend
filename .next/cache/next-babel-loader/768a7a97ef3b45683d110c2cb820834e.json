{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nvar __jsx = React.createElement;\nimport React, { useState } from \"react\";\nimport { AsyncTypeahead } from 'react-bootstrap-typeahead';\nimport { useRouter } from 'next/router';\nimport { Http } from \"../../Services/API/Http\";\nvar SEARCH_URI = 'https://kitaablu.com/api/v1/search/';\n\nvar CustomAsyncTypeahead = function CustomAsyncTypeahead(props) {\n  var router = useRouter();\n\n  var _useState = useState(false),\n      isLoading = _useState[0],\n      setIsLoading = _useState[1];\n\n  var _useState2 = useState([]),\n      options = _useState2[0],\n      setOptions = _useState2[1];\n\n  var handleSearch = function handleSearch(query) {\n    var _options;\n\n    return _regeneratorRuntime.async(function handleSearch$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            setIsLoading(true);\n            _context.prev = 1;\n            _context.next = 4;\n            return _regeneratorRuntime.awrap(Http.Request('GET', \"\".concat(SEARCH_URI + query), {\n              type: props.type\n            }));\n\n          case 4:\n            _options = _context.sent;\n            setOptions(_options);\n            _context.next = 11;\n            break;\n\n          case 8:\n            _context.prev = 8;\n            _context.t0 = _context[\"catch\"](1);\n            console.log(\"Error while fetching props: \", _context.t0);\n\n          case 11:\n            setIsLoading(false);\n\n          case 12:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[1, 8]], Promise);\n  };\n\n  var changeRoute = function changeRoute(options) {\n    if (options && options[0]) {\n      if (props.type == 'director') {\n        router.push(\"/director/\".concat(options[0].value));\n      } else {\n        router.push(\"/company/\".concat(options[0].value));\n      }\n    }\n  };\n\n  return __jsx(AsyncTypeahead, {\n    id: \"async-example\",\n    isLoading: isLoading,\n    labelKey: function labelKey(option) {\n      return \"\".concat(option.name, \" | \").concat(option.value);\n    },\n    minLength: 3,\n    onSearch: handleSearch,\n    options: options,\n    placeholder: props.placeholder,\n    renderMenuItemChildren: function renderMenuItemChildren(option, props) {\n      return __jsx(\"div\", null, \"\".concat(option.name));\n    },\n    onChange: changeRoute\n  });\n};\n\nexport { CustomAsyncTypeahead as AsyncTypeahead };","map":null,"metadata":{},"sourceType":"module"}