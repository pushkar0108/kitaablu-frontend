{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState } from \"react\";\nimport { AsyncTypeahead } from 'react-bootstrap-typeahead';\nimport { useRouter } from 'next/router';\nimport { Http } from \"../../Services/API/Http\";\nconst SEARCH_URI = 'https://kitaablu.com/api/v1/search/';\n\nconst CustomAsyncTypeahead = props => {\n  const router = useRouter();\n  const {\n    0: isLoading,\n    1: setIsLoading\n  } = useState(false);\n  const {\n    0: options,\n    1: setOptions\n  } = useState([]);\n\n  const handleSearch = async query => {\n    setIsLoading(true);\n\n    try {\n      const options = await Http.Request('GET', `${SEARCH_URI + query}`, {\n        type: props.filter || 'company'\n      });\n      setOptions(options);\n    } catch (error) {\n      console.log(\"Error while fetching props: \", error);\n    }\n\n    setIsLoading(false);\n  };\n\n  const changeRoute = options => {\n    if (options && options[0]) {\n      if (props.filter == 'director') {\n        router.push(`/director/${options[0].CIN}`);\n      } else {\n        router.push(`/company/${options[0].DIN}`);\n      }\n    }\n  };\n\n  return __jsx(AsyncTypeahead, {\n    id: \"async-example\",\n    isLoading: isLoading,\n    labelKey: option => `${option.name} | ${option.CIN || option.DIN}`,\n    minLength: 3,\n    onSearch: handleSearch,\n    options: options,\n    placeholder: props.placeholder || \"Search using company name or CIN ...\",\n    renderMenuItemChildren: (option, props) => __jsx(\"div\", null, `${option.name}`),\n    onChange: changeRoute\n  });\n};\n\nexport { CustomAsyncTypeahead as AsyncTypeahead };","map":{"version":3,"sources":["/Users/pushkargoel/Myapps/next-boilerplate/src/Components/AsyncTypeahead/index.tsx"],"names":["React","useState","AsyncTypeahead","useRouter","Http","SEARCH_URI","CustomAsyncTypeahead","props","router","isLoading","setIsLoading","options","setOptions","handleSearch","query","Request","type","filter","error","console","log","changeRoute","push","CIN","DIN","option","name","placeholder"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,cAAT,QAA+B,2BAA/B;AACA,SAASC,SAAT,QAA0B,aAA1B;AAGA,SAASC,IAAT;AAEA,MAAMC,UAAU,GAAG,qCAAnB;;AACA,MAAMC,oBAAqE,GAAIC,KAAD,IAAwB;AAClG,QAAMC,MAAM,GAAGL,SAAS,EAAxB;AACA,QAAM;AAAA,OAACM,SAAD;AAAA,OAAYC;AAAZ,MAA4BT,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM;AAAA,OAACU,OAAD;AAAA,OAAUC;AAAV,MAAwBX,QAAQ,CAAC,EAAD,CAAtC;;AAEA,QAAMY,YAAY,GAAG,MAAOC,KAAP,IAAiB;AAClCJ,IAAAA,YAAY,CAAC,IAAD,CAAZ;;AAEA,QAAI;AACA,YAAMC,OAAY,GAAG,MAAMP,IAAI,CAACW,OAAL,CACvB,KADuB,EAEtB,GAAEV,UAAU,GAAGS,KAAM,EAFC,EAGvB;AACIE,QAAAA,IAAI,EAAET,KAAK,CAACU,MAAN,IAAgB;AAD1B,OAHuB,CAA3B;AAQAL,MAAAA,UAAU,CAACD,OAAD,CAAV;AACH,KAVD,CAUE,OAAOO,KAAP,EAAc;AACZC,MAAAA,OAAO,CAACC,GAAR,CAAY,8BAAZ,EAA4CF,KAA5C;AACH;;AAEDR,IAAAA,YAAY,CAAC,KAAD,CAAZ;AACH,GAlBD;;AAoBA,QAAMW,WAAW,GAAIV,OAAD,IAAa;AAC7B,QAAGA,OAAO,IAAIA,OAAO,CAAC,CAAD,CAArB,EAA0B;AACtB,UAAGJ,KAAK,CAACU,MAAN,IAAgB,UAAnB,EAA+B;AAC3BT,QAAAA,MAAM,CAACc,IAAP,CAAa,aAAYX,OAAO,CAAC,CAAD,CAAP,CAAWY,GAAI,EAAxC;AACH,OAFD,MAEO;AACHf,QAAAA,MAAM,CAACc,IAAP,CAAa,YAAWX,OAAO,CAAC,CAAD,CAAP,CAAWa,GAAI,EAAvC;AACH;AACJ;AACJ,GARD;;AAUA,SACI,MAAC,cAAD;AACI,IAAA,EAAE,EAAC,eADP;AAEI,IAAA,SAAS,EAAEf,SAFf;AAGI,IAAA,QAAQ,EAAEgB,MAAM,IAAK,GAAEA,MAAM,CAACC,IAAK,MAAKD,MAAM,CAACF,GAAP,IAAcE,MAAM,CAACD,GAAI,EAHrE;AAII,IAAA,SAAS,EAAE,CAJf;AAKI,IAAA,QAAQ,EAAEX,YALd;AAMI,IAAA,OAAO,EAAEF,OANb;AAOI,IAAA,WAAW,EAAEJ,KAAK,CAACoB,WAAN,IAAqB,sCAPtC;AAQI,IAAA,sBAAsB,EAAE,CAACF,MAAD,EAASlB,KAAT,KACpB,mBACM,GAAEkB,MAAM,CAACC,IAAK,EADpB,CATR;AAaI,IAAA,QAAQ,EAAEL;AAbd,IADJ;AAiBH,CApDD;;AAsDA,SAASf,oBAAoB,IAAIJ,cAAjC","sourcesContent":["import React, { useState } from \"react\";\nimport { AsyncTypeahead } from 'react-bootstrap-typeahead';\nimport { useRouter } from 'next/router';\n\nimport { IAsyncTypeahead } from \"./AsyncTypeahead\";\nimport { Http } from '../../Services/API/Http';\n\nconst SEARCH_URI = 'https://kitaablu.com/api/v1/search/';\nconst CustomAsyncTypeahead: React.FunctionComponent<IAsyncTypeahead.IProps> = (props): JSX.Element => {\n    const router = useRouter();\n    const [isLoading, setIsLoading] = useState(false);\n    const [options, setOptions] = useState([]);\n\n    const handleSearch = async (query) => {\n        setIsLoading(true);\n\n        try {\n            const options: any = await Http.Request(\n                'GET',\n                `${SEARCH_URI + query}`,\n                {\n                    type: props.filter || 'company'\n                }\n            );\n\n            setOptions(options);\n        } catch (error) {\n            console.log(\"Error while fetching props: \", error);\n        }\n\n        setIsLoading(false);\n    };\n\n    const changeRoute = (options) => {\n        if(options && options[0]) {\n            if(props.filter == 'director') {\n                router.push(`/director/${options[0].CIN}`);\n            } else {\n                router.push(`/company/${options[0].DIN}`);\n            }\n        }\n    };\n\n    return (\n        <AsyncTypeahead\n            id=\"async-example\"\n            isLoading={isLoading}\n            labelKey={option => `${option.name} | ${option.CIN || option.DIN}`}\n            minLength={3}\n            onSearch={handleSearch}\n            options={options}\n            placeholder={props.placeholder || \"Search using company name or CIN ...\"}\n            renderMenuItemChildren={(option, props) => (\n                <div>\n                    {`${option.name}`}\n                </div>\n            )}\n            onChange={changeRoute}\n        />\n    );\n};\n\nexport { CustomAsyncTypeahead as AsyncTypeahead };\n"]},"metadata":{},"sourceType":"module"}