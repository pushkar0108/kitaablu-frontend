{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n// #region Global Imports\nimport \"isomorphic-unfetch\";\nimport getConfig from \"next/config\";\nimport { stringify } from \"query-string\";\nimport { isServer } from \"../Helper\"; // #endregion Global Imports\n// #region Interface Imports\n\n// #endregion Interface Imports\nvar _getConfig = getConfig(),\n    _getConfig$publicRunt = _getConfig.publicRuntimeConfig,\n    API_KEY = _getConfig$publicRunt.API_KEY,\n    API_URL = _getConfig$publicRunt.API_URL;\n\nvar BASE_URL_CONFIG = {\n  PRODUCTION: {\n    server: \"http://localhost:4004/api/\",\n    client: \"https://kitaablu.com/api/\"\n  },\n  DEVELOPMENT: {\n    server: \"https://kitaablu.com/api/\",\n    client: \"https://kitaablu.com/api/\"\n  }\n};\n\nvar getBaseUrl = function getBaseUrl() {\n  var env = \"development\" ? \"development\".toUpperCase() : \"DEVELOPMENT\";\n  var config = BASE_URL_CONFIG[env];\n  return isServer() ? config.server : config.client;\n};\n\nexport var Http = {\n  Request: function Request(methodType, url, params, payload) {\n    return _regeneratorRuntime.async(function Request$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            return _context2.abrupt(\"return\", new Promise(function (resolve, reject) {\n              var query = params ? \"?\".concat(stringify(_objectSpread({}, params, {\n                api_key: API_KEY\n              }))) : \"\";\n              fetch(\"\".concat(getBaseUrl()).concat(url).concat(query), {\n                body: JSON.stringify(payload),\n                cache: \"no-cache\",\n                headers: {\n                  \"content-type\": \"application/json\"\n                },\n                method: \"\".concat(methodType)\n              }).then(function _callee(response) {\n                return _regeneratorRuntime.async(function _callee$(_context) {\n                  while (1) {\n                    switch (_context.prev = _context.next) {\n                      case 0:\n                        if (!(response.status === 200)) {\n                          _context.next = 2;\n                          break;\n                        }\n\n                        return _context.abrupt(\"return\", response.json().then(resolve));\n\n                      case 2:\n                        return _context.abrupt(\"return\", reject(response));\n\n                      case 3:\n                      case \"end\":\n                        return _context.stop();\n                    }\n                  }\n                }, null, null, null, Promise);\n              })[\"catch\"](function (e) {\n                reject(e);\n              });\n            }));\n\n          case 1:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n};","map":{"version":3,"sources":["/Users/pushkar.goel/Myapps/next-boilerplate/src/Services/API/Http/index.ts"],"names":["getConfig","stringify","isServer","publicRuntimeConfig","API_KEY","API_URL","BASE_URL_CONFIG","PRODUCTION","server","client","DEVELOPMENT","getBaseUrl","env","toUpperCase","config","Http","Request","methodType","url","params","payload","Promise","resolve","reject","query","api_key","fetch","body","JSON","cache","headers","method","then","response","status","json","e"],"mappings":";;;;;;;AAAA;AACA,OAAO,oBAAP;AACA,OAAOA,SAAP,MAAsB,aAAtB;AACA,SAASC,SAAT,QAA0B,cAA1B;AACA,SAASC,QAAT,oB,CACA;AAEA;;AAEA;iBAIIF,SAAS,E;uCADTG,mB;IAAuBC,O,yBAAAA,O;IAASC,O,yBAAAA,O;;AAGpC,IAAMC,eAAe,GAAG;AACpBC,EAAAA,UAAU,EAAE;AACRC,IAAAA,MAAM,EAAE,4BADA;AAERC,IAAAA,MAAM,EAAE;AAFA,GADQ;AAKpBC,EAAAA,WAAW,EAAE;AACTF,IAAAA,MAAM,EAAE,2BADC;AAETC,IAAAA,MAAM,EAAE;AAFC;AALO,CAAxB;;AAWA,IAAME,UAAU,GAAG,SAAbA,UAAa,GAAM;AACrB,MAAIC,GAAG,GAAG,gBAAuB,cAAqBC,WAArB,EAAvB,GAA4D,aAAtE;AACA,MAAIC,MAAM,GAAGR,eAAe,CAACM,GAAD,CAA5B;AACA,SAAOV,QAAQ,KAAKY,MAAM,CAACN,MAAZ,GAAqBM,MAAM,CAACL,MAA3C;AACH,CAJD;;AAMA,OAAO,IAAMM,IAAI,GAAG;AAChBC,EAAAA,OAAO,EAAE,iBACLC,UADK,EAELC,GAFK,EAGLC,MAHK,EAILC,OAJK;AAAA;AAAA;AAAA;AAAA;AAAA,8CAME,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,kBAAMC,KAAK,GAAGL,MAAM,cACVlB,SAAS,mBAAMkB,MAAN;AAAcM,gBAAAA,OAAO,EAAErB;AAAvB,iBADC,IAEd,EAFN;AAIAsB,cAAAA,KAAK,WAAIf,UAAU,EAAd,SAAmBO,GAAnB,SAAyBM,KAAzB,GAAkC;AACnCG,gBAAAA,IAAI,EAAEC,IAAI,CAAC3B,SAAL,CAAemB,OAAf,CAD6B;AAEnCS,gBAAAA,KAAK,EAAE,UAF4B;AAGnCC,gBAAAA,OAAO,EAAE;AACL,kCAAgB;AADX,iBAH0B;AAMnCC,gBAAAA,MAAM,YAAKd,UAAL;AAN6B,eAAlC,CAAL,CAQKe,IARL,CAQU,iBAAMC,QAAN;AAAA;AAAA;AAAA;AAAA;AAAA,8BACEA,QAAQ,CAACC,MAAT,KAAoB,GADtB;AAAA;AAAA;AAAA;;AAAA,yDAESD,QAAQ,CAACE,IAAT,GAAgBH,IAAhB,CAAqBV,OAArB,CAFT;;AAAA;AAAA,yDAIKC,MAAM,CAACU,QAAD,CAJX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eARV,WAcW,UAAAG,CAAC,EAAI;AACRb,gBAAAA,MAAM,CAACa,CAAD,CAAN;AACH,eAhBL;AAiBH,aAtBM,CANF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADO,CAAb","sourcesContent":["// #region Global Imports\nimport \"isomorphic-unfetch\";\nimport getConfig from \"next/config\";\nimport { stringify } from \"query-string\";\nimport { isServer } from '../Helper';\n// #endregion Global Imports\n\n// #region Interface Imports\nimport { HttpModel } from \"@Interfaces\";\n// #endregion Interface Imports\n\nconst {\n    publicRuntimeConfig: { API_KEY, API_URL },\n} = getConfig();\n\nconst BASE_URL_CONFIG = {\n    PRODUCTION: {\n        server: \"http://localhost:4004/api/\",\n        client: \"https://kitaablu.com/api/\"\n    },\n    DEVELOPMENT: {\n        server: \"https://kitaablu.com/api/\",\n        client: \"https://kitaablu.com/api/\"\n    }\n};\n\nconst getBaseUrl = () => {\n    let env = process.env.NODE_ENV ? process.env.NODE_ENV.toUpperCase() : \"DEVELOPMENT\";\n    let config = BASE_URL_CONFIG[env];\n    return isServer() ? config.server : config.client;\n};\n\nexport const Http = {\n    Request: async <A>(\n        methodType: string,\n        url: string,\n        params?: HttpModel.IRequestQueryPayload,\n        payload?: HttpModel.IRequestPayload\n    ): Promise<A> => {\n        return new Promise((resolve, reject) => {\n            const query = params\n                ? `?${stringify({ ...params, api_key: API_KEY })}`\n                : \"\";\n\n            fetch(`${getBaseUrl()}${url}${query}`, {\n                body: JSON.stringify(payload),\n                cache: \"no-cache\",\n                headers: {\n                    \"content-type\": \"application/json\",\n                },\n                method: `${methodType}`,\n            })\n                .then(async response => {\n                    if (response.status === 200) {\n                        return response.json().then(resolve);\n                    }\n                    return reject(response);\n                })\n                .catch(e => {\n                    reject(e);\n                });\n        });\n    },\n};\n"]},"metadata":{},"sourceType":"module"}