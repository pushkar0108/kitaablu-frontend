{"version":3,"file":"static/webpack/static/development/pages/company/[cin].js.8bd051724663d837147b.hot-update.js","sources":["webpack:///./pages/company/[cin].tsx"],"sourcesContent":["// #region Global Imports\nimport * as React from \"react\";\nimport { NextPage, GetServerSideProps } from \"next\";\nimport Link from 'next/link';\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { Http } from '../../src/Services/API/Http';\n// #endregion Global Imports\n\n// #region Local Imports\nimport { withTranslation } from \"@Server/i18n\";\nimport {\n    Container,\n    Top,\n    TopText,\n    Middle,\n    MiddleLeft,\n    MiddleLeftButtons,\n    MiddleRight,\n    Apod,\n    ApodButton,\n} from \"@Styled/Home\";\nimport { IStore } from \"@Redux/IStore\";\nimport { HomeActions } from \"@Actions\";\nimport { Heading, LocaleButton, Layout } from \"@Components\";\n// #endregion Local Imports\n\n// #region Interface Imports\nimport { IHomePage, ReduxNextPageContext } from \"@Interfaces\";\n// #endregion Interface Imports\n\nconst Home: NextPage<IHomePage.IProps, IHomePage.InitialProps> = ({\n    t,\n    i18n,\n    cinData,\n}) => {\n    const home = useSelector((state: IStore) => state.home);\n    const dispatch = useDispatch();\n\n    if (!cinData) {\n        return (\n            <Layout>\n                <div>NO DATA PRESENT FOR CIN</div>\n            </Layout>\n        );\n    }\n\n    const details = JSON.parse(cinData.data);\n    const refData = [\n        {\n            title: \"CIN\",\n            value: details[\"CIN\"]\n        },\n        {\n            title: \"Company Name\",\n            value: details[\"Company Name\"]\n        },\n        {\n            title: \"LLP Name\",\n            value: details[\"LLP Name\"]\n        },\n        {\n            title: \"ROC Code\",\n            value: details[\"ROC Code\"]\n        },\n        {\n            title: \"Registration Number\",\n            value: details[\"Registration Number\"]\n        },\n        {\n            title: \"Company Category\",\n            value: details[\"Company Category\"]\n        },\n        {\n            title: \"Company SubCategory\",\n            value: details[\"Company SubCategory\"]\n        },\n        {\n            title: \"Class of Company\",\n            value: details[\"Class of Company\"]\n        },\n        {\n            title: \"Authorised Capital(Rs)\",\n            value: details[\"Authorised Capital(Rs)\"]\n        },\n        {\n            title: \"Paid up Capital(Rs)\",\n            value: details[\"Paid up Capital(Rs)\"]\n        },\n        {\n            title: \"Number of Members(Applicable in case of company without Share Capital)\",\n            value: details[\"Number of Members(Applicable in case of company without Share Capital)\"]\n        },\n        {\n            title: \"Number of Partners\",\n            value: details[\"Number of Partners\"]\n        },\n        {\n            title: \"Number of Designated Partners\",\n            value: details[\"Number of Designated Partners\"]\n        },\n        {\n            title: \"Date of Incorporation\",\n            value: details[\"Date of Incorporation\"]\n        },\n        {\n            title: \"Registered Address\",\n            value: details[\"Registered Address\"]\n        },\n        {\n            title: \"Address\",\n            value: details[\"Address other than R/o where all or any books of account and papers are maintained\"]\n        },\n        {\n            title: \"Email Id\",\n            value: details[\"Email Id\"]\n        },\n        {\n            title: \"Whether Listed or not\",\n            value: details[\"Whether Listed or not\"]\n        },\n        {\n            title: \"Suspended at stock exchange\",\n            value: details[\"Suspended at stock exchange\"]\n        },\n        {\n            title: \"Date of last AGM\",\n            value: details[\"Date of last AGM\"]\n        },\n        {\n            title: \"Date of Balance Sheet\",\n            value: details[\"Date of Balance Sheet\"]\n        },\n        {\n            title: \"Company Status(for efiling)\",\n            value: details[\"Company Status(for efiling)\"]\n        },\n        {\n            title: \"LLP Status\",\n            value: details[\"LLP Status\"]\n        }\n    ];\n\n    const renderLocaleButtons = (activeLanguage: string) =>\n        [\"en\", \"es\", \"tr\"].map(lang => (\n            <LocaleButton\n                key={lang}\n                lang={lang}\n                isActive={activeLanguage === lang}\n                onClick={() => i18n.changeLanguage(lang)}\n            />\n        ));\n\n    return (\n        <Layout>\n            <h1 className=\"my-4\">\n                <small>{details[\"CIN\"]}</small>\n                <div>{details[\"Company Name\"] || details[\"LLP Name\"]}</div>\n            </h1>\n            <div className=\"card mb-4\">\n                <div className=\"card-body\">\n                    <table className=\"table table-hover\">\n                        <tbody>\n                            {\n                                refData.filter(data => data.value).map(data => {\n                                    return (\n                                        <tr key={data.title}>\n                                            <th scope=\"row\">{data.title}</th>\n                                            <td>{data.value}</td>\n                                        </tr>\n                                    )\n                                })\n                            }\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n            <div className=\"card mb-4\">\n                <h2 className=\"card-header\">Directors</h2>\n                <div className=\"card-body\">\n                    <table className=\"table table-hover\">\n                        <thead>\n                            <tr className=\"text-semibold text-fiord-blue\">\n                                <th scope=\"col\">#</th>\n                                <th scope=\"col\">DIN/PAN</th>\n                                <th scope=\"col\">Name</th>\n                                <th scope=\"col\">Begin date</th>\n                                <th scope=\"col\">End date</th>\n                                <th scope=\"col\">Surrendered DIN</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {\n                                details.dins.map((director, index) => {\n                                    return (\n                                        <tr key={`director_${director[0]}`} className=\"text-semibold text-reagent-gray\">\n                                            <td>{index + 1}</td>\n                                            <td>\n                                                <Link href=\"/director/[din]\" as={`/director/${director[0]}`}>\n                                                    <a>{director[0]}</a>\n                                                </Link>\n                                            </td>\n                                            <td>{director[6]}</td>\n                                            <td>{director[7]}</td>\n                                            <td>{director[8]}</td>\n                                            <td>{director[6]}</td>\n                                        </tr>\n                                    );\n                                })\n                            }\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n            <div className=\"card mb-4\">\n                <h2 className=\"card-header\">Charges</h2>\n                <div className=\"card-body\">\n                    <table className=\"table table-hover\">\n                        <thead className=\"bg-light\">\n                            <tr className=\"text-semibold text-fiord-blue\">\n                                <th scope=\"col\" className=\"border-0\">#</th>\n                                <th scope=\"col\" className=\"border-0\">Assets under charge</th>\n                                <th scope=\"col\" className=\"border-0\">Charge Amount</th>\n                                <th scope=\"col\" className=\"border-0\">Date of Creation</th>\n                                <th scope=\"col\" className=\"border-0\">Date of Modification</th>\n                                <th scope=\"col\" className=\"border-0\">Status</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {\n                                details.charges.map((charge, index) => {\n                                    return (\n                                        <tr key={`charge_${charge[1]}`} className=\"text-semibold text-reagent-gray\">\n                                            <td>{index + 1}</td>\n                                            <td>{charge[0]}</td>\n                                            <td>{charge[1]}</td>\n                                            <td>{charge[2]}</td>\n                                            <td>{charge[3]}</td>\n                                            <td>{charge[4]}</td>\n                                        </tr>\n                                    );\n                                })\n                            }\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n        </Layout>\n    );\n};\n\nHome.getInitialProps = async (\n    ctx: ReduxNextPageContext\n): Promise<IHomePage.InitialProps> => {\n    const { cin } = ctx.query;\n\n    let cinData;\n    try {\n        cinData = await Http.Request('GET', `http://3.7.5.125:4000/v1/company/${cin}`);\n    } catch (error) {\n        console.log(\"Error while fetching cin details for cin: \", cin, error);\n        cinData = null;\n    }\n\n\n    await ctx.store.dispatch(\n        HomeActions.GetApod({\n            params: { hd: true },\n        })\n    );\n    return {\n        namespacesRequired: [\"common\"],\n        cinData\n    };\n};\n\n// export const getServerSideProps: GetServerSideProps = async (context) => {\n//     const cinData = await Http.Request('GET', `http://3.7.5.125:4000/v1/company/U55209AP2018PTC107672`);\n//     console.log(\"cinData on server side: \", cinData);\n//     return {\n//       props: {\n//         cinData,\n//         name: \"pushkar\"\n//       }\n//     }\n// }\n\n\nconst Extended = withTranslation(\"common\")(Home);\n\n\nexport default Extended;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAEA;AACA;AACA;AAGA;AACA;AAAA;AAaA;AACA;AAGA;AACA;AACA;AAEA;AAIA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AAEA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AACA;AAKA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AADA;AADA;AACA;AASA;AAEA;AAAA;AAIA;AAAA;AACA;AAAA;AACA;AAAA;AAGA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAIA;AAMA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAMA;AACA;AAAA;AAAA;AAGA;AAAA;AAAA;AAUA;AAMA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAMA;AACA;AAAA;AAAA;AASA;AAQA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAHA;AAAA;AAAA;AACA;AADA;AAOA;AAPA;AAAA;AACA;AADA;AAAA;AAAA;AASA;AACA;AACA;AAXA;AAAA;AAAA;AAgBA;AAAA;AAAA;AADA;AACA;AAhBA;AAAA;AAoBA;AACA;AAFA;AACA;AApBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA0BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;;;;A","sourceRoot":""}